String Builder with Reverse Text and Caps

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace stringBuilder
{
    class Program
    {
        static void Main(string[] args)
        {
            //1.Use the SB Class to concatenate strings, especially when in a loop!


            /* StringBuilder name = new StringBuilder();


            for (int i = 0; i < 100; i++ )
 
            {
    
            name.Append(i);
 
            }
 
            Console.WriteLine(name.ToString());*/




            //2.Compare StringBuilder to Standard Joining


            //Prove that it saves time to use StringBuilder

            //Print the date

            /*Console.WriteLine(DateTime.Now);

            // Now is a property of DateTime Class. Prints current date/time 

            StringBuilder numSB = new StringBuilder();  // instantiates a new StringBuilder object

            numSB.Append("Build with StringBuilder!");

            
            for (int i = 0; i < 200000; i++)
            {
    
                numSB.Append(i);
            }
            Console.WriteLine(DateTime.Now);*/  // Not long from start to end

            //2.5 Concat
            /*Console.WriteLine(DateTime.Now);
            // Now is a property of DateTime Class. Prints current date/time 
            string numStr = " ";
            numStr += "Build with Concatenation.";


            for (int i = 0; i < 200000; i++)
            {
                numStr += i;
            }

            Console.WriteLine(DateTime.Now);*/



            //3.Word Reverser

            string text = "EM edit";
            string reversed = ReverseText(text);
            Console.WriteLine(reversed);
            //Add a call to Extract Capitals
            string caps = ExtractCapitals(text);
            Console.WriteLine(caps);


            // Console output:
            // tide ME

        }

        static string ReverseText(string text) //hey, this is a method! Look, you’ve created your own.
        {
            StringBuilder sb = new StringBuilder(); //Creating a StringBuilder Object
            for (int i = text.Length - 1; i >= 0; i--)
            {
                sb.Append(text[i]);
            }
            return sb.ToString();

        }
        public static string ExtractCapitals(string str)
        {
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < str.Length; i++)
            {
                char ch = str[i];
                if (char.IsUpper(ch))
                {
                    result.Append(ch);
                }
            }
            return result.ToString();
        
        }
    }
}
